{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/TMDBsearch.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","TMDBsearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currSearch","newSearch","searchResults","value","setState","_this2","fetch","then","results","json","data","map","result","react_default","a","createElement","key","id","name","_this3","onSubmit","handleSubmit","type","onChange","e","handleChange","target","onClick","componentDidMount","ReactDOM","render","components_TMDBsearch","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oPCItBC,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DC6CSC,cA3Db,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,WAAY,IACZC,UAAW,GACXC,cAAe,IALNV,4EAWAW,GACXR,KAAKS,SAAU,CAAEH,UAAYE,2CAKD,KAAzBR,KAAKI,MAAME,UACZN,KAAKS,SAAU,CAACJ,WAAa,MAE1BL,KAAKS,SAAU,CAAEJ,WAAaL,KAAKI,MAAME,wDAG9B,IAAAI,EAAAV,KAclB,OAbAW,MAAM,+GAAgHX,KAAKI,MAAMC,WAAY,wBAC5IO,KAAM,SAAAC,GACL,OAAOA,EAAQC,SACdF,KAAK,SAAAG,GACN,IAAIR,EAAgBQ,EAAKF,QAAQG,IAAI,SAACC,GACpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAMJ,EAAOK,IAChBJ,EAAAC,EAAAC,cAAA,SAAIH,EAAOM,SAIjBb,EAAKD,SAAS,CAACF,cAAeA,MAEzBW,EAAAC,EAAAC,cAAA,UAAKpB,KAAKI,MAAMG,cAAcS,IAAI,SAAAC,GAAM,OAAIC,EAAAC,EAAAC,cAAA,UAAKH,uCAK/C,IAAAO,EAAAxB,KACP,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMK,SAAUzB,KAAK0B,cACrBR,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOnB,MAAOR,KAAKI,MAAME,UAAWsB,SAAU,SAACC,GAAD,OAAML,EAAKM,aAAaD,EAAEE,OAAOvB,WAE7FU,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASnB,MAAM,SAASwB,QAAS,kBAAMR,EAAKE,mBAExDR,EAAAC,EAAAC,cAAA,2BAAmBpB,KAAKI,MAAMC,YAC5BL,KAAKiC,4BAvDU3C,aCKzB4C,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAiBC,SAASC,eAAe,SF4HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,KAAK,SAAA8B,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.41bcd1c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component} from 'react';\r\n\r\nclass TMDBsearch extends Component {\r\n    \r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      currSearch: ' ',\r\n      newSearch: '',\r\n      searchResults: []\r\n    };\r\n  }\r\n \r\n\r\n\r\n  handleChange(value) {\r\n    this.setState( { newSearch : value });\r\n\r\n  }\r\n\r\n  handleSubmit() {\r\n    if(this.state.newSearch === ''){\r\n      this.setState( {currSearch : ' '});\r\n    }\r\n    else this.setState( { currSearch : this.state.newSearch});\r\n  }\r\n\r\ncomponentDidMount() {\r\n  fetch('https://api.themoviedb.org/3/search/tv?api_key=68157c75320237711cf91ff0c3f21e9c&language=en-US&page=1&query='+ this.state.currSearch +'&include_adult=false')\r\n  .then( results => {\r\n    return results.json();\r\n  }).then(data => {\r\n    let searchResults = data.results.map((result) => {\r\n      return(\r\n        <div key ={result.id}>\r\n          <p>{result.name}</p>\r\n        </div>\r\n      )\r\n    })\r\n    this.setState({searchResults: searchResults});\r\n  })\r\n  return <ul>{this.state.searchResults.map(result => <li>{result}</li>)}</ul>;\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          TV Show:\r\n          <input type=\"text\" value={this.state.newSearch} onChange={(e) =>this.handleChange(e.target.value)} />\r\n        </label>\r\n        <input type=\"button\" value=\"Submit\" onClick={() => this.handleSubmit()} />\r\n        </form>\r\n        <p>Searching for: {this.state.currSearch}</p>\r\n        { this.componentDidMount() }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TMDBsearch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport TMDBsearch from './components/TMDBsearch';\n\nReactDOM.render(<TMDBsearch />,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}